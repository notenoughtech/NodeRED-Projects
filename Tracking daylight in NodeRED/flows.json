[{"id":"67cafc47f29239cb","type":"tab","label":"Tracking daylight in NodeRED","disabled":false,"info":"![enter image description here](https://notenoughtech.com/wp-content/uploads/2019/02/maxresdefault-5.jpg)\n\nWorking with time in NodeRed to achieve a unique way of tracking day/night cycles for a simple home automation scenes. This project will show you how to obtain day/night info that you can use to turn things on and off. Perfect for automating shades, lights and other light sources. It uses geolocation to calculate the sunrise/sunset times and provides the times in your local timezone.  \n\n- [Complete instructions](https://notenoughtech.com/home-automation/nodered-sun-and-time/)  \n\n## Features\n\n  \n\n- geolocation based\n\n- supports timezones\n\n- information about sunrise/sunset/noon and lenght of day\n\n- estra info about civil/nautical/astronomical daylight features\n\n### Settings\nVisit Settings node to set your lat/long and other parameters. Consider [preserving variables in NodeRED](https://notenoughtech.com/home-automation/preserving-variables-in-nodered/) to keep your data stored after reboot.\n\n#### Feedback\n\n  \n\nIf you have any feedback, please use this [GitHub page](https://github.com/notenoughtech/NodeRED-Projects/tree/master/Tracking%20daylight%20in%20NodeRED) to report it\n\n\n\n## ðŸ”— Follow my work\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/notenoughtech?label=%40notenoughtech&logo=twitter&style=for-the-badge)](https://twitter.com/NotEnoughTECH) [![YouTube Channel Subscribers](https://img.shields.io/youtube/channel/subscribers/UC7V__uBIaZotHn_smHJShGQ?label=NotEnoughTech&logo=YouTube&logoColor=red&style=for-the-badge)](https://www.youtube.com/channel/UC7V__uBIaZotHn_smHJShGQ)\n\n[![Subreddit subscribers](https://img.shields.io/reddit/subreddit-subscribers/not_enough_tech?logo=reddit&logoColor=white&style=for-the-badge)](https://www.reddit.com/r/Not_Enough_Tech/)\n##\nAnd if you feeling like buying me a coffee or supporting me in a more continuous way:\n\n  \n\n- [Paypal](https://www.paypal.me/notenoughtech) & [Patreon](https://www.patreon.com/NotEnoughTECH)\n\n  \n\nI hope you have enjoyed the project!"},{"id":"0f8025ffdd4085b6","type":"group","z":"67cafc47f29239cb","name":"Daylight tracker","style":{"stroke":"#ffC000","fill":"#ffffbf","label":true,"label-position":"n","color":"#000000"},"nodes":["d79ec2db089e29a0","5c37a87a8a295b4a","2973c4488d520b65","819883bf552b1c33"],"x":34,"y":249,"w":632,"h":132},{"id":"5ae1880911be11e5","type":"group","z":"67cafc47f29239cb","name":"Sunset/Sunrise Info","style":{"stroke":"#001f60","fill":"#bfc7d7","label":true,"label-position":"n","color":"#000000"},"nodes":["78015c48679b02aa","4b30e07a3290276d","714bf74239c742f3","718fd8e0579330d3","e01ac0a3233a01cf","0de22e8d93416a14"],"x":34,"y":99,"w":1132,"h":122},{"id":"78015c48679b02aa","type":"comment","z":"67cafc47f29239cb","g":"5ae1880911be11e5","name":"Get Sun Info (the easy way)","info":"","x":180,"y":140,"wires":[]},{"id":"d79ec2db089e29a0","type":"function","z":"67cafc47f29239cb","g":"0f8025ffdd4085b6","name":"Is it night time yet? ","func":"var time = global.get(\"Time\");\n\nvar sunrise = time.sunrise;\nvar sunset = time.sunset;\n\n\nvar now = new Date();\nvar timeNow = now.getTime();\n\n\n\n//from sunrise to sunset\nif(timeNow >= new Date(sunrise).getTime() && timeNow <= new Date(sunset).getTime()){\n    msg.payload = \"According to my calculations it's daytime\";\n    global.set(\"time_of_Day\", \"day\");\n}\n\n//from sunset to sunrise\nif(timeNow > new Date(sunset).getTime() || timeNow <  new Date(sunrise).getTime()){\n    msg.payload = \"According to my calculations it's nighttime\";\n    global.set(\"time_of_Day\", \"night\");\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":340,"wires":[["819883bf552b1c33"]]},{"id":"5c37a87a8a295b4a","type":"inject","z":"67cafc47f29239cb","g":"0f8025ffdd4085b6","name":"Every Minute","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"60","crontab":"","once":true,"onceDelay":0.1,"topic":"","payloadType":"date","x":160,"y":340,"wires":[["d79ec2db089e29a0"]]},{"id":"4b30e07a3290276d","type":"function","z":"67cafc47f29239cb","g":"5ae1880911be11e5","name":"Save Recalculated times (the easy way)","func":"var timezone_enabled = flow.get(\"timezone\");\n\n\nlet date = new Date()\nvar timeZoneOffset = date.getTimezoneOffset()*60000;\n\n\n//convert string format into time object with timezone offset\nfunction stringToObject_withOffset(x){\n    let z = new Date(x).valueOf();\n    let adjustedTime = (z - timeZoneOffset);\n    let new_time = new Date(adjustedTime);\n    return new_time;\n}\n\n//convert string format into time object without the offset\nfunction stringToObject_noOffset(now){\n    let x = new Date(now);\n    return x;\n}\n\n//convert seconds to human readable time in hh:mm:ss,\nfunction secondsToHms(d) {\n    d = Number(d);\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n\n    return ('0' + h).slice(-2) + \"h \" + ('0' + m).slice(-2)+\"min\";\n}\n\n\n// lets take the values and save them as global values for later use. We will convert strings to ISO date so we can easily work with this in the future\n\nvar time;\n\n// values in UTC\nif (timezone_enabled === false){\n   time = {\n    \"sunrise\" : stringToObject_noOffset(msg.payload.results.sunrise),\n    \"noon\"    : stringToObject_noOffset(msg.payload.results.solar_noon),\n    \"sunset\"  : stringToObject_noOffset(msg.payload.results.sunset),\n    \n    \"day_lenght\" : {\"in_sec\": msg.payload.results.day_length,\n                    \"in_hhmmss\" : secondsToHms(msg.payload.results.day_length)},\n    \"civil_twiligh_start\" :            stringToObject_noOffset(msg.payload.results.civil_twilight_begin),\n    \"civil_twiligh_stop\"  :            stringToObject_noOffset(msg.payload.results.civil_twilight_end),\n    \"nautical_twilight_start\"   :      stringToObject_noOffset(msg.payload.results.nautical_twilight_begin),\n    \"nautical_twilight_stop\"    :      stringToObject_noOffset(msg.payload.results.nautical_twilight_end),\n    \"astronomical_twilight_start\"  :   stringToObject_noOffset(msg.payload.results.astronomical_twilight_begin),\n    \"astronomical_twilight_stop\"   :   stringToObject_noOffset(msg.payload.results.astronomical_twilight_end),\n    \"timezone\" : date.getTimezoneOffset()\n    }\n}\n\n// values adjusted by the local timezone\nif (timezone_enabled === true){\n      time = {\n    \"sunrise\" : stringToObject_withOffset(msg.payload.results.sunrise),\n    \"noon\"    : stringToObject_withOffset(msg.payload.results.solar_noon),\n    \"sunset\"  : stringToObject_withOffset(msg.payload.results.sunset),\n    \n    \"day_lenght\" : {\"in_sec\": msg.payload.results.day_length,\n                    \"in_hhmmss\" : secondsToHms(msg.payload.results.day_length)},\n    \"civil_twiligh_start\" :            stringToObject_withOffset(msg.payload.results.civil_twilight_begin),\n    \"civil_twiligh_stop\"  :            stringToObject_withOffset(msg.payload.results.civil_twilight_end),\n    \"nautical_twilight_start\"   :      stringToObject_withOffset(msg.payload.results.nautical_twilight_begin),\n    \"nautical_twilight_stop\"    :      stringToObject_withOffset(msg.payload.results.nautical_twilight_end),\n    \"astronomical_twilight_start\"  :   stringToObject_withOffset(msg.payload.results.astronomical_twilight_begin),\n    \"astronomical_twilight_stop\"   :   stringToObject_withOffset(msg.payload.results.astronomical_twilight_end),\n    \"timezone\" : 0 - date.getTimezoneOffset()\n    } \n}\n\nglobal.set(\"Time\", time);\nmsg.payload = time;\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":780,"y":180,"wires":[["0de22e8d93416a14"]]},{"id":"c84c802a0b8ed230","type":"function","z":"67cafc47f29239cb","name":"Settings*","func":"//set your coordinates and timezone in On Start tab\n","outputs":1,"noerr":0,"initialize":"//use google maps or similar to get your position, I'm saving it as global variable as it may be useful\n//for other projects and profiles. Sample ccordinates will look like\n//https://www.google.co.uk/maps/@55.123456,-1.123456,14z\n//long = 55.123456\n//lat = -1.123456\n//zoom level (*in case you are curious what that value is) =14z\n\n\n\nvar latitude = \"54.5\";\nvar longitude = \"-1.3\";\nvar timezone = true;    //set true to use local timezone offset, set false to get values in UTC without daylight saving\n\nflow.set(\"timezone\", timezone);\nglobal.set(\"longitude\", longitude);\nglobal.set(\"latitude\", latitude);\n\n","finalize":"","libs":[],"x":120,"y":60,"wires":[[]]},{"id":"714bf74239c742f3","type":"inject","z":"67cafc47f29239cb","g":"5ae1880911be11e5","name":"Get Sun info","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"00 03 * * *","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":160,"y":180,"wires":[["718fd8e0579330d3"]]},{"id":"718fd8e0579330d3","type":"function","z":"67cafc47f29239cb","g":"5ae1880911be11e5","name":"Get Sunset info","func":"// more about the API at https://sunrise-sunset.org/api\n\nvar latitude = global.get('latitude');\nvar longitude = global.get('longitude');\n\nmsg.url = \"https://api.sunrise-sunset.org/json?&formatted=0&lat=\"+ latitude +\"&lng=\"+ longitude;\nreturn msg;\n\n\n\n\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":180,"wires":[["e01ac0a3233a01cf"]]},{"id":"e01ac0a3233a01cf","type":"http request","z":"67cafc47f29239cb","g":"5ae1880911be11e5","name":"GET","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":530,"y":180,"wires":[["4b30e07a3290276d"]]},{"id":"2973c4488d520b65","type":"comment","z":"67cafc47f29239cb","g":"0f8025ffdd4085b6","name":"Is it night time yet","info":"","x":145,"y":290,"wires":[]},{"id":"819883bf552b1c33","type":"debug","z":"67cafc47f29239cb","g":"0f8025ffdd4085b6","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":550,"y":340,"wires":[]},{"id":"0de22e8d93416a14","type":"debug","z":"67cafc47f29239cb","g":"5ae1880911be11e5","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1050,"y":180,"wires":[]}]