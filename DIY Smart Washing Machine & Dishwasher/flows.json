[{"id":"d4afe973.ec1bb8","type":"function","z":"785fa28c.32493c","name":"Calculate power","func":"var power = msg.payload.Outputs[0].Load;  //adjust message structure to your needs \nvar noPowerOff = flow.get(\"noPowerOff\");  // get appliance type - impacts the nagging mode\n\nvar res   = flow.get(\"Resolution\");\nvar total = flow.get(\"TotalPower\");\nvar cost  = flow.get(\"CostArray\");\nvar tariff = flow.get(\"Tariff\");\nvar metricsf = flow.get(\"MetricFrequency\");\nvar standby = flow.get(\"StandbyPower\");\nvar operation = flow.get(\"Operation\");\nvar currentWash = flow.get(\"CurrentWashCycle\");\nvar history = flow.get(\"WashingHistory\");\n\nvar date = new Date();\nvar dateS = date.getTime()/1000;\nvar hour = date.getHours();\n\nfunction secondsToHms(d) {\n    d = Number(d);\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n    return ('0' + h).slice(-2) + \"h \" + ('0' + m).slice(-2)+\"min\";\n}\n\n//push element\ntotal.unshift(power);\n//remove X elementh\nif(total[res] === undefined) {flow.set(\"TotalPower\", total);}\nelse {\n    total.splice(res, 1);\n    flow.set(\"TotalPower\", total);\n}\n\n\n//calculate average\nvar sum = total;\nfunction add(accumulator, a) {\n    return accumulator + a;\n}\n\nvar average = (sum.reduce(add)/total.length);\nflow.set(\"average\", average);\n\n\n\n\n// apply correct price tarif to calculate the power consumption in cost per minute units\nvar price;\nif(hour >= tariff.Start && hour < tariff.End){\n    price = tariff.CostDay;\n}\nif(hour < tariff.Start || hour >= tariff.End){\n    price = tariff.CostNight;\n}\n\nvar costPerMinute =  power/1000 * price / (60* (60/metricsf));\ncost.push(costPerMinute);\nflow.set(\"CostArray\", cost);\n\n\n//define different operational states to make sure machine follows the cycle states\n\n//appliance switched off\nif(average === 0){\n    flow.set(\"Operation\", \"off\");\n    return [msg,null];\n}\n\n\n//appliance on standby (before & after the wash cycle)\nif(noPowerOff === true){\n    if(average >= standby && operation === \"off\" || operation === \"finished\" ){\n        flow.set(\"Operation\", \"standby\");\n        currentWash.standbyTimeStart = dateS;\n        \n    }\n}\nif(noPowerOff === false){\n    if(average >= standby && operation === \"off\"){\n        flow.set(\"Operation\", \"standby\");\n        currentWash.standbyTimeStart = dateS;\n        \n    }\n}\n\n\n//appliance in the wash cycle\nif(average > 5 ){\n    flow.set(\"collected\", false);\n    flow.set(\"Operation\", \"washing\");\n    if(currentWash.standbyTimeStart === null){\n        currentWash.standbyTimeStart = dateS;\n        currentWash.standbyTimeStop = dateS;\n    }\n    currentWash.standbyTimeStop = dateS;\n    currentWash.washTimeStart = dateS;\n    \n}\n\n\n//apliance has finished the wash cycle \nif(average < 5 && average >= standby && operation === \"washing\"){\n    flow.set(\"Operation\", \"finished\");\n    currentWash.washTimeStop = dateS;\n    currentWash.washFinishStart = dateS;\n    \n    //total cost\n    var sumCost = flow.get(\"CostArray\");\n    var costofpower = sumCost.reduce(add);\n    currentWash.totalCost = Math.round(costofpower * 100) / 100;\n    \n    // support for devices without complete power off\n    if(noPowerOff === true){\n        currentWash.washFinishStop = dateS;\n        wash = {\n            \"date\" : date,\n            \"cost\" : currentWash.totalCost,\n            \"TotalWashTime\" : secondsToHms(currentWash.washTimeStart -currentWash.standbyTimeStart),\n            \"TotalStandby\" : secondsToHms(currentWash.standbyTimeStop - currentWash.standbyTimeStart),\n            \"TotalWash\" : secondsToHms(currentWash.washTimeStop - currentWash.washTimeStart),\n            \"TotalFinishWait\": secondsToHms(currentWash.washFinishStop - currentWash.washFinishStart)\n        };\n        \n        flow.set(\"collected\", true);\n        history.push(wash);\n        flow.set(\"WashingHistory\", history);\n        flow.set(\"CostArray\", [0]);\n        \n        var cycle = {\"standbyTimeStart\": null,\n            \"standbyTimeStop\": null,\n            \"washTimeStart\": null,\n            \"washTimeStop\": null,\n            \"washFinishStart\": null,\n            \"washFinishStop\": null,\n            \"totalCost\": 0,\n    }\n        flow.set(\"CurrentWashCycle\", cycle);\n    }\n    \n    \n    return [null, msg];\n}\n\n\n//washing collected\nif(average < standby && operation === \"finished\"){\n    currentWash.washFinishStop = dateS;\n    \n    wash = {\n        \"date\" : date,\n        \"cost\" : currentWash.totalCost,\n        \"TotalWashTime\" : secondsToHms(currentWash.washTimeStart -currentWash.standbyTimeStart),\n        \"TotalStandby\" : secondsToHms(currentWash.standbyTimeStop - currentWash.standbyTimeStart),\n        \"TotalWash\" : secondsToHms(currentWash.washTimeStop - currentWash.washTimeStart),\n        \"TotalFinishWait\": secondsToHms(currentWash.washFinishStop - currentWash.washFinishStart)\n    };\n    \n    flow.set(\"collected\", true);\n    history.push(wash);\n    flow.set(\"WashingHistory\", history);\n    flow.set(\"CostArray\", [0]);\n    \n    var cycle = {\"standbyTimeStart\": null,\n        \"standbyTimeStop\": null,\n        \"washTimeStart\": null,\n        \"washTimeStop\": null,\n        \"washFinishStart\": null,\n        \"washFinishStop\": null,\n        \"totalCost\": 0,\n}\n    flow.set(\"CurrentWashCycle\", cycle);\n    flow.set(\"Operation\", \"off\");\n}\n\n\n \n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":180,"wires":[[],["999c8e87.dcccf"]]}]