[
    {
        "id": "4bf109a5.a97ad8",
        "type": "tab",
        "label": "Tuya Cloud API",
        "disabled": false,
        "info": "\r\n# Tuya Cloud API for beginners\r\n\r\nThis project explains how to work with Tuya Cloud API and how to use Postman to develop REST request for NodeRED \r\nThanks to James Wilson for udating the flow to match latest authtentication requirement\r\n\r\n\r\n![Logo](https://notenoughtech.com/wp-content/uploads/2021/07/2021-07-12-23_35_30-Brand-Logo-Guidelines-Video-v2.0.0_0817.pdf-Personal-Microsoft%E2%80%8B-Edge.jpg)\r\n\r\n    \r\n## Features\r\n\r\n- Authentication\r\n- Get device list\r\n- Get status and data points\r\n- Issue commands\r\n\r\n  \r\n## Documentation\r\n\r\n[Documentation](https://linktodocumentation)\r\n\r\n  \r\n## More on\r\n\r\nVisit my page and the [article](https://notenoughtech.com/home-automation/tuya-cloud-api/) covering this topic.\r\n\r\n  \r\n## Appendix\r\n\r\nPostman, Tuya Cloud API\r\n  \r\n## ðŸ”— Follow my work\r\n[![Twitter Follow](https://img.shields.io/twitter/follow/notenoughtech?label=%40notenoughtech&logo=twitter&style=for-the-badge)](https://twitter.com/NotEnoughTECH)\r\n[![YouTube Channel Subscribers](https://img.shields.io/youtube/channel/subscribers/UC7V__uBIaZotHn_smHJShGQ?label=NotEnoughTech&logo=YouTube&logoColor=red&style=for-the-badge)](https://www.youtube.com/channel/UC7V__uBIaZotHn_smHJShGQ)\r\n[![Subreddit subscribers](https://img.shields.io/reddit/subreddit-subscribers/not_enough_tech?logo=reddit&logoColor=white&style=for-the-badge)](https://www.reddit.com/r/Not_Enough_Tech/)",
        "env": []
    },
    {
        "id": "5313998d.974bb8",
        "type": "function",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "func": "var device_id = flow.get(\"device_id\");\nvar url = \"https://openapi.tuyaeu.com/v1.0/iot-03/devices/\"+device_id+\"/specification\";\nvar t = msg.time;\nvar method = \"GET\";\nvar client_id  = flow.get(\"tuya_client_id\");\nvar creds = flow.get(\"tuya\");\nvar token = creds.access_token;\nvar sign = msg.payload;\nmsg.headers ={\n \"sign_method\": \"HMAC-SHA256\",\n \"client_id\" : client_id,\n \"t\": t.toString(),\n \"mode\" : \"cors\",\n \"Content-Type\": \"application/json\",\n \"sign\": sign.toUpperCase(),\n \"access_token\" : token\n },\n msg.payload = '';\n msg.url = url;\n msg.method = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 180,
        "wires": [
            [
                "3ac1a645.0bb26a"
            ]
        ]
    },
    {
        "id": "3ac1a645.0bb26a",
        "type": "http request",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 890,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a87ea183.b0d6b",
        "type": "inject",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "d5eaa68e.d5e5c8"
            ]
        ]
    },
    {
        "id": "d5eaa68e.d5e5c8",
        "type": "function",
        "z": "4bf109a5.a97ad8",
        "name": "Create signStr",
        "func": "var creds = flow.get(\"tuya\");\nvar access_token = creds.access_token;\nvar device_id = flow.get(\"device_id\");\nvar t = msg.time;\nvar client_id  = flow.get(\"tuya_client_id\");\nvar token = access_token;\nvar method = \"GET\";\nvar sign_url = \"/v1.0/iot-03/devices/\"+device_id+\"/specification\";\nvar content_hash = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\nvar string_to_sign = method+\"\\n\"+content_hash+\"\\n\"+\"\"+\"\\n\"+sign_url;\nvar signStr = client_id+token+t+string_to_sign;\n\nmsg.payload = signStr;\nmsg.time = msg.time;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 180,
        "wires": [
            [
                "f6881316.41cdb"
            ]
        ]
    },
    {
        "id": "f6881316.41cdb",
        "type": "hmac",
        "z": "4bf109a5.a97ad8",
        "name": "Sign signStr with secret",
        "algorithm": "HmacSHA256",
        "key": "yoursecret",
        "x": 490,
        "y": 180,
        "wires": [
            [
                "5313998d.974bb8"
            ]
        ]
    },
    {
        "id": "f811e1b6.ee796",
        "type": "function",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "func": "var url = \"https://openapi.tuyaeu.com/v1.0/token?grant_type=1\";\nvar t = msg.time;\nvar sign = msg.payload;\nvar client_id  = flow.get(\"tuya_client_id\");\nmsg.headers ={\n \"sign_method\": \"HMAC-SHA256\",\n \"client_id\" : client_id,\n \"t\": t.toString(),\n \"sign\": sign.toUpperCase(),\n },\n msg.payload = '';\n msg.url = url;\n msg.method = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 80,
        "wires": [
            [
                "1bfa922b.aad55e"
            ]
        ]
    },
    {
        "id": "1bfa922b.aad55e",
        "type": "http request",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 890,
        "y": 80,
        "wires": [
            [
                "74db8d4a.eee2c4"
            ]
        ]
    },
    {
        "id": "3023a9a8.6133e6",
        "type": "inject",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "26588c1b.dcec54"
            ]
        ]
    },
    {
        "id": "26588c1b.dcec54",
        "type": "function",
        "z": "4bf109a5.a97ad8",
        "name": "Create signStr",
        "func": "var client_id  = flow.get(\"tuya_client_id\");\nvar t = msg.time;\n\n\nvar method = \"GET\";\nvar sign_url = \"/v1.0/token?grant_type=1\";\n\n// Couldn't get nodered to process an empty string so this is a hash of an empty file\nvar content_hash = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\nvar string_to_sign = method+\"\\n\"+content_hash+\"\\n\"+\"\"+\"\\n\"+sign_url;\nvar signStr = client_id+t+string_to_sign;\n\nmsg.payload = signStr;\nmsg.time = msg.time;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 80,
        "wires": [
            [
                "5eeed491.cd055c"
            ]
        ]
    },
    {
        "id": "5eeed491.cd055c",
        "type": "hmac",
        "z": "4bf109a5.a97ad8",
        "name": "Sign signStr with secret",
        "algorithm": "HmacSHA256",
        "key": "yoursecret",
        "x": 470,
        "y": 80,
        "wires": [
            [
                "f811e1b6.ee796"
            ]
        ]
    },
    {
        "id": "b1615793.fd0548",
        "type": "comment",
        "z": "4bf109a5.a97ad8",
        "name": "Get Access Token",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "608b6d1e.a8a874",
        "type": "comment",
        "z": "4bf109a5.a97ad8",
        "name": "Get Status Of Device",
        "info": "",
        "x": 120,
        "y": 140,
        "wires": []
    },
    {
        "id": "74db8d4a.eee2c4",
        "type": "function",
        "z": "4bf109a5.a97ad8",
        "name": "Extract Token from Response",
        "func": "var data = msg.payload;\nvar access = data.result.access_token;\nvar refresh = data.result.refresh_token;\n\nvar creds ={\n \"access_token\" : access,\n \"refresh_token\" : refresh\n}\nflow.set(\"tuya\", creds);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1120,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "bbb94560.17a528",
        "type": "function",
        "z": "4bf109a5.a97ad8",
        "name": "Settings CLICK SETUP TAB",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "var client_id  = \"xxxxx\";\nvar user_id = \"xxxxx\";\nvar device_id = \"xxxxx\";\nflow.set(\"tuya_client_id\", client_id);\nflow.set(\"tuya_user_id\", user_id );\nflow.set(\"device_id\", device_id );",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "14af15b8.86c55a",
        "type": "comment",
        "z": "4bf109a5.a97ad8",
        "name": "Turn Device Off",
        "info": "",
        "x": 100,
        "y": 240,
        "wires": []
    },
    {
        "id": "ae0294c.e17c268",
        "type": "function",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "func": "var device_id = flow.get(\"device_id\");\nvar url = \"https://openapi.tuyaeu.com/v1.0/iot-03/devices/\"+device_id+\"/commands\";\nvar t = msg.time;\nvar client_id  = flow.get(\"tuya_client_id\");\nvar creds = flow.get(\"tuya\");\nvar access_token = creds.access_token;\nvar sign = msg.payload;\n\nmsg.headers ={\n \"sign_method\": \"HMAC-SHA256\",\n \"client_id\" : client_id,\n \"t\": t.toString(),\n \"mode\" : \"cors\",\n \"Content-Type\": \"application/json\",\n \"sign\": sign.toUpperCase(),\n \"access_token\" : access_token,\n },\n msg.payload = '{\"commands\":[{\"code\":\"switch\",\"value\":false}]}';\n msg.url = url;\n msg.method = \"POST\";\n //msg.payload = '';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 880,
        "y": 300,
        "wires": [
            [
                "448c54b6.42427c"
            ]
        ]
    },
    {
        "id": "448c54b6.42427c",
        "type": "http request",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1030,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e5b52f57.cd35e",
        "type": "inject",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"commands\":[{\"code\":\"switch\",\"value\":false}]}",
        "payloadType": "str",
        "x": 90,
        "y": 300,
        "wires": [
            [
                "7bf971b.8e0989"
            ]
        ]
    },
    {
        "id": "7f3ecdbc.908f24",
        "type": "function",
        "z": "4bf109a5.a97ad8",
        "name": "Create signStr",
        "func": "var creds = flow.get(\"tuya\");\nvar access_token = creds.access_token;\nvar device_id = flow.get(\"device_id\");\nvar hashed_size = msg.payload;\nvar t = msg.time;\nvar client_id  = flow.get(\"tuya_client_id\");\nvar token = access_token;\nvar method = \"POST\";\nvar sign_url = \"/v1.0/iot-03/devices/\"+device_id+\"/commands\";\nvar content_hash = hashed_size;\nvar string_to_sign = method+\"\\n\"+content_hash+\"\\n\"+\"\"+\"\\n\"+sign_url;\nvar signStr = client_id+token+t+string_to_sign;\n\nmsg.payload = signStr;\nmsg.time = msg.time;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 300,
        "wires": [
            [
                "17bac91b.4b1287"
            ]
        ]
    },
    {
        "id": "17bac91b.4b1287",
        "type": "hmac",
        "z": "4bf109a5.a97ad8",
        "name": "Sign signStr with secret",
        "algorithm": "HmacSHA256",
        "key": "yoursecret",
        "x": 690,
        "y": 300,
        "wires": [
            [
                "ae0294c.e17c268"
            ]
        ]
    },
    {
        "id": "9295d1f4.912c5",
        "type": "comment",
        "z": "4bf109a5.a97ad8",
        "name": "Turn Device On",
        "info": "",
        "x": 100,
        "y": 360,
        "wires": []
    },
    {
        "id": "c2dcb090.24f8f",
        "type": "function",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "func": "var device_id = flow.get(\"device_id\");\nvar url = \"https://openapi.tuyaeu.com/v1.0/iot-03/devices/\"+device_id+\"/commands\";\nvar t = msg.time;\nvar client_id  = flow.get(\"tuya_client_id\");\nvar creds = flow.get(\"tuya\");\nvar access_token = creds.access_token;\nvar sign = msg.payload;\n\nmsg.headers ={\n \"sign_method\": \"HMAC-SHA256\",\n \"client_id\" : client_id,\n \"t\": t.toString(),\n \"mode\" : \"cors\",\n \"Content-Type\": \"application/json\",\n \"sign\": sign.toUpperCase(),\n \"access_token\" : access_token,\n },\n msg.payload = '{\"commands\":[{\"code\":\"switch\",\"value\":true}]}';\n msg.url = url;\n msg.method = \"POST\";\n //msg.payload = '';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 880,
        "y": 420,
        "wires": [
            [
                "f6260f4c.e8663"
            ]
        ]
    },
    {
        "id": "f6260f4c.e8663",
        "type": "http request",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1030,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "556e864.5344d78",
        "type": "inject",
        "z": "4bf109a5.a97ad8",
        "name": "",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"commands\":[{\"code\":\"switch\",\"value\":true}]}",
        "payloadType": "str",
        "x": 90,
        "y": 420,
        "wires": [
            [
                "a21182b6.3a489"
            ]
        ]
    },
    {
        "id": "c4e6dff.719862",
        "type": "function",
        "z": "4bf109a5.a97ad8",
        "name": "Create signStr",
        "func": "var creds = flow.get(\"tuya\");\nvar access_token = creds.access_token;\nvar device_id = flow.get(\"device_id\");\nvar hashed_size = msg.payload;\nvar t = msg.time;\nvar client_id  = flow.get(\"tuya_client_id\");\nvar token = access_token;\nvar method = \"POST\";\nvar sign_url = \"/v1.0/iot-03/devices/\"+device_id+\"/commands\";\nvar content_hash = hashed_size;\nvar string_to_sign = method+\"\\n\"+content_hash+\"\\n\"+\"\"+\"\\n\"+sign_url;\nvar signStr = client_id+token+t+string_to_sign;\n\nmsg.payload = signStr;\nmsg.time = msg.time;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 420,
        "wires": [
            [
                "552476b9.24cad8"
            ]
        ]
    },
    {
        "id": "552476b9.24cad8",
        "type": "hmac",
        "z": "4bf109a5.a97ad8",
        "name": "Sign signStr with secret",
        "algorithm": "HmacSHA256",
        "key": "yoursecret",
        "x": 690,
        "y": 420,
        "wires": [
            [
                "c2dcb090.24f8f"
            ]
        ]
    },
    {
        "id": "a21182b6.3a489",
        "type": "digest",
        "z": "4bf109a5.a97ad8",
        "name": "Hash the body data",
        "algorithm": "SHA256",
        "x": 250,
        "y": 420,
        "wires": [
            [
                "c4e6dff.719862"
            ]
        ]
    },
    {
        "id": "7bf971b.8e0989",
        "type": "digest",
        "z": "4bf109a5.a97ad8",
        "name": "Hash the body data",
        "algorithm": "SHA256",
        "x": 250,
        "y": 300,
        "wires": [
            [
                "7f3ecdbc.908f24"
            ]
        ]
    }
]