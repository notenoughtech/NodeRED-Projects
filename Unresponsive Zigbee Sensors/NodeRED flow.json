[
    {
        "id": "4a0ab706536ae3e1",
        "type": "inject",
        "z": "7ad930fe9fc560fd",
        "g": "e961a2e02fbb335a",
        "name": "Every 5 min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 1240,
        "wires": [
            [
                "9e969eec6fa17757"
            ]
        ]
    },
    {
        "id": "9e969eec6fa17757",
        "type": "function",
        "z": "7ad930fe9fc560fd",
        "g": "e961a2e02fbb335a",
        "name": "Check responisvnes",
        "func": "var sensors = flow.get(\"sensors\");\nvar settings = flow.get(\"sensor_notifications\");\nvar time_now = Date.now();\nvar logs = flow.get(\"logs\");  \n\n\n\nfunction secToTime(sec){\n    let d = (\"0\" + Math.floor(sec / 86400)).slice(-2);\n    let h = (\"0\" + Math.floor((sec % 86400) / 3600)).slice(-2);\n    let m = (\"0\" + Math.floor((sec % 3600) / 60)).slice(-2);\n    let s = (\"0\" + sec % 60).slice(-2);\n\n    var timer = \"\";\n    timer += (sec >= 86400 ? d + \"d \" : \"\");\n    timer += (sec >= 3600 ? h + \"h \" : \"\");\n    timer += (sec >= 60 ? m + \"m \" : \"\");    \n    return timer;\n\n}\n\n\nsensors.forEach(function(sensor) {\n    if (sensor.last_report !== undefined){\n        let diff = (time_now - sensor.last_report) /1000;\n        if(diff >  settings.timeout){\n            var s = logs.findIndex(i => i.room === sensor.room);        \n            if (s > -1) {\n                logs[s].unresponsive = secToTime(diff);                \n            }\n            else{\n                var entry = {\n                    \"room\": sensor.room,\n                    \"last_update\": sensor.last_report,\n                    \"unresponsive\": secToTime(diff),\n                    \"notification\": false,\n                    \"battery\": sensor.battery_percent,\n                };\n                logs.push(entry);\n            }               \n            flow.set(\"logs\", logs); \n        }      \n    }\n});\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "22ee913d40d40093",
        "type": "inject",
        "z": "7ad930fe9fc560fd",
        "g": "e961a2e02fbb335a",
        "name": "Every 1h",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 1280,
        "wires": [
            [
                "5f82c85233c7cf0e"
            ]
        ]
    },
    {
        "id": "5f82c85233c7cf0e",
        "type": "function",
        "z": "7ad930fe9fc560fd",
        "g": "e961a2e02fbb335a",
        "name": "Notify",
        "func": "var logs =  flow.get(\"logs\");\nvar settings = flow.get(\"sensor_notifications\");\n\nvar to_notify_list = [];\n\n\n// add all unnotified sensors\nfor(let i = 0; i < logs.length; i++){\n    if(logs[i].notification === false){\n        let entry;\n        if (settings.include_battery === true){\n            entry = \"sensor in \" + logs[i].room + \" offline for: \" + logs[i].unresponsive + \", last battery readout: \" + logs[i].battery + \"%  \\n\";\n        }\n        if (settings.include_battery === false) {\n            entry = \"sensor in \" + logs[i].room + \" offline for: \" + logs[i].unresponsive + \" \\n\";\n        }\n        to_notify_list.push(entry);\n\n        // update notification status\n        logs[i].notification = true;\n    }\n}\nflow.set(\"logs\", logs);\n\n//send only if there are unnotified sensors\nif(to_notify_list.length > 0){\n    ;\n\n    if(settings.use_names === true){\n        msg.push = {\n            \"devices\": settings.devices,\n            \"title\": settings.title,\n            \"text\": \"Info: \\n •\" + to_notify_list.join(\"•\"),\n            \"icon\": settings.icon\n        };\n        return msg;\n\n    }\n    else{\n        msg.push = {\n            \"deviceIds\": settings.deviceIDs,\n            \"title\": settings.title,\n            \"text\": \"Info: \\n •\" + to_notify_list.join(\"•\"),\n            \"icon\": settings.icon\n        };\n        return msg;\n\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1280,
        "wires": [
            [
                "72d52bfa47560478"
            ]
        ]
    },
    {
        "id": "72d52bfa47560478",
        "type": "join-message",
        "z": "7ad930fe9fc560fd",
        "g": "e961a2e02fbb335a",
        "name": "",
        "text": "",
        "title": "",
        "url": "",
        "notificationicon": "",
        "joinConfig": "d744c044afd722e9",
        "x": 680,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "59678710c1fd2953",
        "type": "inject",
        "z": "7ad930fe9fc560fd",
        "g": "e961a2e02fbb335a",
        "name": "Every 8am",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 1320,
        "wires": [
            [
                "5dde7cc74912d5d7"
            ]
        ]
    },
    {
        "id": "fdbcaef8bbfd5299",
        "type": "function",
        "z": "7ad930fe9fc560fd",
        "g": "e961a2e02fbb335a",
        "name": "Reset notification status",
        "func": "flow.set(\"logs\", []);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "667796ca550a5ebe",
        "type": "function",
        "z": "7ad930fe9fc560fd",
        "g": "e961a2e02fbb335a",
        "name": "Settings",
        "func": "//see On Start for settings",
        "outputs": 1,
        "noerr": 0,
        "initialize": "/* for this flow to work, you must store your sensor data in the following format:\n\nAll sensors saved as an array (flow.set(\"sensors\", your_sensor_array)) and each sensor is an object with these values:\nvar sensor = {\"room\":\"hall\",\n              \"last_report\":1675014128151};\n\nYou can obtain the timestamp from each update by using Date.now() function: sensor.last_report = Date.now();\n\nMore about Join in NodeRED: https://notenoughtech.com/featured/how-to-use-join-app-in-nodered/\n*/\n\n\n// set your preferences\n\nvar timeout = 120;                                                     // enter timeout threshold in minutes after which you the sensor will be set to \"unresponsive\" \nvar devices = \"Mi 11\";                                                 // comma separated list of Join device names   OR \nvar deviceIDs = \"\";                                                    // comma separated list of Join deviceIDs\nvar use_names = true                                                   // if true will use Join names, otherwise joinIDs - respective values must be filled\nvar icon =  \"https://cdn-icons-png.flaticon.com/512/3593/3593297.png\"  // publicly available icon for your mobile notification\nvar title = \"Sensor Warning\";                                          // title of your notification\nvar reminder = true;                                                   // reset warnings for the next day\nvar include_battery = true;                                            // include last known battery % - requires \"battery_percent\" key in sensor object            \n\n\n// don't modify anything below this line\n\nvar settings = {\n    \"timeout\" : timeout * 60,\n    \"use_names\": use_names,\n    \"devices\" : devices,\n    \"deviceIDs\": deviceIDs,\n    \"icon\": icon,\n    \"title\": title,\n    \"reminder\" : reminder,\n    \"include_battery\": true\n}\n\nflow.set(\"logs\", []);\nflow.set(\"sensor_notifications\", settings);",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "5dde7cc74912d5d7",
        "type": "switch",
        "z": "7ad930fe9fc560fd",
        "g": "e961a2e02fbb335a",
        "name": "reminder?",
        "property": "sensor_notifications.reminder",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 1320,
        "wires": [
            [
                "fdbcaef8bbfd5299"
            ]
        ]
    },
    {
        "id": "d744c044afd722e9",
        "type": "join-config",
        "name": "Join Config",
        "register": true
    }
]
